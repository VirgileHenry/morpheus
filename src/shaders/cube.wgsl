// Cube vertices with integrated triangles - positions
const positions: array<vec4<f32>, 36> = array<vec4<f32>, 36>(
    // Front face
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, 0.5, -0.5, 1.0),
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, 0.5, -0.5, 1.0),
    vec4<f32>(-0.5, 0.5, -0.5, 1.0),

    // Back face
    vec4<f32>(-0.5, -0.5, 0.5, 1.0),
    vec4<f32>(0.5, -0.5, 0.5, 1.0),
    vec4<f32>(0.5, 0.5, 0.5, 1.0),
    vec4<f32>(-0.5, -0.5, 0.5, 1.0),
    vec4<f32>(0.5, 0.5, 0.5, 1.0),
    vec4<f32>(-0.5, 0.5, 0.5, 1.0),

    // Left face
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(-0.5, -0.5, 0.5, 1.0),
    vec4<f32>(-0.5, 0.5, 0.5, 1.0),
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(-0.5, 0.5, 0.5, 1.0),
    vec4<f32>(-0.5, 0.5, -0.5, 1.0),

    // Right face
    vec4<f32>(0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, -0.5, 0.5, 1.0),
    vec4<f32>(0.5, 0.5, 0.5, 1.0),
    vec4<f32>(0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, 0.5, 0.5, 1.0),
    vec4<f32>(0.5, 0.5, -0.5, 1.0),

    // Bottom face
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, -0.5, 0.5, 1.0),
    vec4<f32>(-0.5, -0.5, -0.5, 1.0),
    vec4<f32>(0.5, -0.5, 0.5, 1.0),
    vec4<f32>(-0.5, -0.5, 0.5, 1.0)
);

// Cube normals
const normals: array<vec4<f32>, 36> = array<vec4<f32>, 36>(
    // Front face
    vec4<f32>(0.0, 0.0, -1.0, 0.0),
    vec4<f32>(0.0, 0.0, -1.0, 0.0),
    vec4<f32>(0.0, 0.0, -1.0, 0.0),
    vec4<f32>(0.0, 0.0, -1.0, 0.0),
    vec4<f32>(0.0, 0.0, -1.0, 0.0),
    vec4<f32>(0.0, 0.0, -1.0, 0.0),

    // Back face
    vec4<f32>(0.0, 0.0, 1.0, 0.0),
    vec4<f32>(0.0, 0.0, 1.0, 0.0),
    vec4<f32>(0.0, 0.0, 1.0, 0.0),
    vec4<f32>(0.0, 0.0, 1.0, 0.0),
    vec4<f32>(0.0, 0.0, 1.0, 0.0),
    vec4<f32>(0.0, 0.0, 1.0, 0.0),

    // Left face
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    vec4<f32>(-1.0, 0.0, 0.0, 0.0),

    // Right face
    vec4<f32>(1.0, 0.0, 0.0, 0.0),
    vec4<f32>(1.0, 0.0, 0.0, 0.0),
    vec4<f32>(1.0, 0.0, 0.0, 0.0),
    vec4<f32>(1.0, 0.0, 0.0, 0.0),
    vec4<f32>(1.0, 0.0, 0.0, 0.0),
    vec4<f32>(1.0, 0.0, 0.0, 0.0),

    // Bottom face
    vec4<f32>(0.0, -1.0, 0.0, 0.0),
    vec4<f32>(0.0, -1.0, 0.0, 0.0),
    vec4<f32>(0.0, -1.0, 0.0, 0.0),
    vec4<f32>(0.0, -1.0, 0.0, 0.0),
    vec4<f32>(0.0, -1.0, 0.0, 0.0),
    vec4<f32>(0.0, -1.0, 0.0, 0.0)
);

// with compact indents: 

// Cube vertices with integrated triangles - positions
var positions: array<vec4<f32>, 36> = array<vec4<f32>, 36>(
    /* Front face   */ vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, -0.5, 1.0), vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, -0.5, 1.0), vec4<f32>(-0.5, 0.5, -0.5, 1.0),
    /* Back face    */ vec4<f32>(-0.5, -0.5, 0.5, 1.0), vec4<f32>(0.5, -0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, -0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, 0.5, 0.5, 1.0),
    /* Left face    */ vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(-0.5, -0.5, 0.5, 1.0), vec4<f32>(-0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(-0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, 0.5, -0.5, 1.0),
    /* Right face   */ vec4<f32>(0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, -0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, -0.5, 1.0),
    /* Bottom face  */ vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, -0.5, 0.5, 1.0), vec4<f32>(-0.5, -0.5, -0.5, 1.0), vec4<f32>(0.5, -0.5, 0.5, 1.0), vec4<f32>(-0.5, -0.5, 0.5, 1.0),
    /* Top face     */ vec4<f32>(-0.5, 0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, 0.5, -0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(-0.5, 0.5, 0.5, 1.0),
);

// Cube normals
var normals: array<vec4<f32>, 36> = array<vec4<f32>, 36>(
    /* Front face    */ vec4<f32>(0.0, 0.0, -1.0, 0.0), vec4<f32>(0.0, 0.0, -1.0, 0.0), vec4<f32>(0.0, 0.0, -1.0, 0.0), vec4<f32>(0.0, 0.0, -1.0, 0.0), vec4<f32>(0.0, 0.0, -1.0, 0.0), vec4<f32>(0.0, 0.0, -1.0, 0.0),
    /* Back face     */ vec4<f32>(0.0, 0.0, 1.0, 0.0), vec4<f32>(0.0, 0.0, 1.0, 0.0), vec4<f32>(0.0, 0.0, 1.0, 0.0), vec4<f32>(0.0, 0.0, 1.0, 0.0), vec4<f32>(0.0, 0.0, 1.0, 0.0), vec4<f32>(0.0, 0.0, 1.0, 0.0),
    /* Left face     */ vec4<f32>(-1.0, 0.0, 0.0, 0.0), vec4<f32>(-1.0, 0.0, 0.0, 0.0), vec4<f32>(-1.0, 0.0, 0.0, 0.0), vec4<f32>(-1.0, 0.0, 0.0, 0.0), vec4<f32>(-1.0, 0.0, 0.0, 0.0), vec4<f32>(-1.0, 0.0, 0.0, 0.0),
    /* Right face    */ vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(1.0, 0.0, 0.0, 0.0), vec4<f32>(1.0, 0.0, 0.0, 0.0),
    /* Bottom face   */ vec4<f32>(0.0, -1.0, 0.0, 0.0), vec4<f32>(0.0, -1.0, 0.0, 0.0), vec4<f32>(0.0, -1.0, 0.0, 0.0), vec4<f32>(0.0, -1.0, 0.0, 0.0), vec4<f32>(0.0, -1.0, 0.0, 0.0), vec4<f32>(0.0, -1.0, 0.0, 0.0),
    /* Top face      */ vec4<f32>(0.0, 1.0, 0.0, 0.0),  vec4<f32>(0.0, 1.0, 0.0, 0.0),    vec4<f32>(0.0, 1.0, 0.0, 0.0),  vec4<f32>(0.0, 1.0, 0.0, 0.0),    vec4<f32>(0.0, 1.0, 0.0, 0.0),  vec4<f32>(0.0, 1.0, 0.0, 0.0),
);